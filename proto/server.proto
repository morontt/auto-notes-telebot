syntax = "proto3";

package xelbot.com.autonotes.server;

option go_package = "xelbot.com/auto-notes/server/rpc/server";
option php_namespace = "AutoNotes\\Server";
option php_metadata_namespace = "AutoNotes\\Server\\Meta";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

message Cost {
  // integer value, decimal(8, 2) in MySQL
  int32 value = 1;
  // currency code, for example RUB
  string currency = 2;
}

message Car {
  int32 id = 1;
  string name = 2;
  string vin = 3;
  int32 year = 4;
  bool default = 5;
  google.protobuf.Timestamp created_at = 6;
}

message CarCollection {
  repeated Car cars = 1;
}

message FillingStation {
  int32 id = 1;
  string name = 2;
  google.protobuf.Timestamp created_at = 3;
}

message FillingStationCollection {
  repeated FillingStation stations = 1;
}

message FuelType {
  int32 id = 1;
  string name = 2;
}

message FuelTypeCollection {
  repeated FuelType types = 1;
}

message Fuel {
  int32 id = 1;
  Cost cost = 2;
  // integer value, decimal(8, 2) in MySQL
  int32 value = 3;
  FillingStation station = 4;
  google.protobuf.Timestamp date = 5;
  int32 distance = 6;
  Car car = 7;
  google.protobuf.Timestamp created_at = 8;
  FuelType type = 9;
}

message FuelCollection {
  repeated Fuel fuels = 1;
  PaginationMeta meta = 2;
}

message Currency {
  int32 id = 1;
  string name = 2;
  // currency code, for example RUB
  string code = 3;
  bool default = 4;
  google.protobuf.Timestamp created_at = 5;
}

message DefaultCurrency {
  Currency currency = 1;
  bool found = 2;
}

message CurrencyCollection {
  repeated Currency currencies = 1;
}

message PaginationMeta {
  int32 current = 1;
  int32 last = 2;
}

message UserSettings {
  int32 id = 1;
  Car default_car = 2;
  Currency default_currency = 3;
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp updated_at = 5;
  FuelType default_fuel_type = 6;
}

service UserRepository {
  rpc GetCars(google.protobuf.Empty) returns (CarCollection);
  rpc GetCurrencies(google.protobuf.Empty) returns (CurrencyCollection);
  rpc GetDefaultCurrency(google.protobuf.Empty) returns (DefaultCurrency);
  rpc GetUserSettings(google.protobuf.Empty) returns (UserSettings);
  rpc SaveUserSettings(UserSettings) returns (UserSettings);
}

message FuelFilter {
  int32 limit = 1;
  int32 page = 2;
}

message IdRequest {
  int32 id = 1;
}

service FuelRepository {
  rpc GetFuels(FuelFilter) returns (FuelCollection);
  rpc FindFuel(IdRequest) returns (Fuel);
  rpc GetFillingStations(google.protobuf.Empty) returns (FillingStationCollection);
  rpc GetFuelTypes(google.protobuf.Empty) returns (FuelTypeCollection);
  rpc SaveFuel(Fuel) returns (Fuel);
}

message OrderType {
  int32 id = 1;
  string name = 2;
}

message OrderTypeCollection {
  repeated OrderType types = 1;
}

message Order {
  int32 id = 1;
  Cost cost = 2;
  string description = 3;
  string capacity = 4;
  google.protobuf.Timestamp date = 5;
  google.protobuf.Timestamp used_at = 6;
  int32 distance = 7;
  Car car = 8;
  OrderType type = 9;
  google.protobuf.Timestamp created_at = 10;
}

message OrderCollection {
  repeated Order orders = 1;
  PaginationMeta meta = 2;
}

enum ExpenseType {
  EMPTY = 0;
  GARAGE = 1;
  TOOLS = 2;
  TAX = 3;
  INSURANCE = 4;
  ROAD = 5;
  WASHING = 6;
  PARKING = 7;
  OTHER = 99;
}

message Expense {
  int32 id = 1;
  Cost cost = 2;
  string description = 3;
  google.protobuf.Timestamp date = 4;
  Car car = 5;
  ExpenseType type = 6;
  google.protobuf.Timestamp created_at = 7;
}

message ExpenseCollection {
  repeated Expense expenses = 1;
  PaginationMeta meta = 2;
}

message OrderFilter {
  int32 limit = 1;
  int32 page = 2;
}

message ExpenseFilter {
  int32 limit = 1;
  int32 page = 2;
}

service OrderRepository {
  rpc GetOrders(OrderFilter) returns (OrderCollection);
  rpc FindOrder(IdRequest) returns (Order);
  rpc GetOrderTypes(google.protobuf.Empty) returns (OrderTypeCollection);
  rpc SaveOrder(Order) returns (Order);
  rpc GetExpenses(ExpenseFilter) returns (ExpenseCollection);
  rpc FindExpense(IdRequest) returns (Expense);
  rpc SaveExpense(Expense) returns (Expense);
}
